In your second homework assignment, which is built on your first homework, you will gain experience with the map/reduce computational model. We refer to the codebase that you create as a result of this homework as a program and we refer to the Java code that your program processes as a Java application. The git repo for HW2 can be cloned using the command git clone git@bitbucket.org:CS_441_2017/cs_441_2017_hw2.git.

You must create your account at BitBucket https://bitbucket.org/, if you haven't done so in your first homework. Just to remind you, it is imperative that you use your UIC email account that has the extension @uic.edu. Once you create an account with your UIC address, BibBucket will assign you an academic status that allows you to create private repos. Bitbucket users with free accounts cannot create private repos, which are essential for submitting your homeworks and projects. For the setup please consult the description of the prior homework 1.

Your homework assignment is to create a program using the map/reduce model for parallelizing software testing. Your Java application may come with test cases and you will write additional JUnit tests as needed to improve the coverage of the source code statements. You will instrument your Java application using some Java code coverage tool (e.g., I recommend to use EMMA http://emma.sourceforge.net) and executing JUnit tests of the instrumented Java application will result in a test coverage report, a text document that will include lines of code of the Java application executed for the given tests. You will map these test coverage reports to <t, (l1, ..., ln)>, where t is the JUnit test designator and lk is the line number that is covered by the execution of t. The output of your program produces a sorted list of lines of code by the numbers of tests that cover them in the descending order, i.e., <l, (t1,..., tp)>. Those of you who take CS474 concurrently, you may use your HW2 instrumentation program to collect the coverage information.

You will create and run your software application using Apache Hadoop (http://hadoop.apache.org/), a framework for distributed processing of large data sets across multiple computers (or even on a single node) using the map/reduce model. If your laptop/workstation is limited in its RAM, you can use Cloudera QuickStart VM with the minimum req of RAM 4Gb (https://www.cloudera.com/downloads/quickstart_vms/5-12.html). Even though you can install and configure Hadoop on your computers, I recommend that you use a virtual machine of Hortonworks Sandbox, a preconfigured Apache Hadoop installation with a comprehensive software stack (http://hortonworks.com/products/sandbox/). To run the VM, you can install vmWare or VirtualBox. As UIC students, you have access to free vmWare licenses, go to http://go.uic.edu/csvmware to obtain your license. I may have to provide your email addresses to enable your free VM academic licenses. You can complete this homework using either Java (I prefer that you use Java for this assignment). You will use Simple Build Tools (SBT) for building the project and running automated tests. You can use the latest version of IntelliJ IDE for this assignment. The steps for obtaining your free academic vmWare licenses are the following:
- Go to http://go.uic.edu/csvmware
- Click on the "sign in" link at the top
- click on "register"
- select "An account has been created..." and continue with the registration.
- make sure that you use the UIC email with which you are registered with the system.
- only UIC students who are registered for this course are eligible. If you are auditing the course, you need to contact the uic webstore directly.

Next, after creating and testing your map/reduce program locally, you will deploy it and run it on the Amazon Elastic MapReduce (EMR) - you can find plenty of documentation online starting with http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-work-with-steps.html. You will produce a movie that documents all steps of the deployment and execution of your program with your narration and you will upload this movie to youtube.com and you will submit a link to your movie as part of your submission in the README.md file. To produce a movie, you may use an academic version of Camtasia from the UIC webstore or an application for a movie capture of your choice. The captured web browser content should show your login name in the upper right corner of the AWS application and you should introduce yourself in the beginning of the movie speaking into the camera.

For additional FIVE bonus points, you can solve an additional maximum coverage problem for the tests. As input you are given multiple sets of covered lines of code for different tests, <t, (l1, ..., ln)>. Your program should compute at most k of these tests such that the maximum number of the lines of code of the application are covered, i.e. the union of the selected sets of statement coverages for tests has maximal size. Your job will be to describe an algorithm with references where it came from (you may create its implementation in map/reduce or find an existing one on the Internet), implement the algorithm, and present results from its deployment on the EMR platform.

Separate repositories are already created for each of your homeworks and for the course project. You will find a corresponding entry for this homework. You will fork this repository and your fork will be private, no one else besides you, the TA and your course instructor will have access to your fork. Please remember to grant a read access to your repository to your TA and your instructor. In future, for the team homeworks and the course project, you should grant the write access to your forkmates. You can commit and push your code as many times as you want. Your code will not be visible and it should not be visible to other students (except for your forkmates for a team project, but not for this homework). When you push the code into the remote repo, your instructor and the TA will see your code in your separate private fork. Making your fork public or inviting other students to join your fork for an individual homework will result in losing your grade. For grading, only the latest push timed before the deadline will be considered. If you push after the deadline, your grade for the homework will be zero. For more information about using the Git and Bitbucket specifically, please use this link as the starting point https://confluence.atlassian.com/bitbucket/bitbucket-cloud-documentation-home-221448814.html. For those of you who struggle with the Git, I recommend a book by Ryan Hodson on Ry's Git Tutorial. The other book called Pro Git is written by Scott Chacon and Ben Straub and published by Apress and it is freely available https://git-scm.com/book/en/v2/. There are multiple videos on youtube that go into details of the Git organization and use.

Please follow this naming convention while submitting your work : "Firstname_Lastname_hw2", so that we can easily recognize your submission. I repeat, make sure that you will give both your TA and me read access to your private forked repository.

You can post questions and replies, statements, comments, discussion, etc. on Piazza. Remember that you cannot share your code and your solutions (beyond your group for a team homework), but you can ask and advise others using Piazza on where resources and sample programs can be found on the internet, how to resolve dependencies and configuration issues, and how to design the logic of the algorithm. Yet, your implementation should be your own and you cannot share it. Alternatively, you cannot copy and paste someone else's implementation and put your name on it. Your submissions will be checked for plagiarism. When posting question and answers on Piazza, please select the appropriate folder, i.e., hw1 to ensure that all discussion threads can be easily located.

Submission deadline: Sunday, October 8 at 11PM CST. Your submission will include the application's source code, the InteliJ project files, the SBT build configuration, the README.md file in the root directory that contains the description of your implementation with tests, a link to the movie that shows the steps of your deployment, a guide on how to compile and run it using SBT, and what the limitations of your implementation are. 

THE INSTRUCTOR (and the TA) WILL NOT ANSWER ANY REQUESTS FROM STUDENTS STARTING 7PM THE EVENING OF THE SUBMISSION DEADLINE.

Evaluation criteria:
- the maximum grade for this homework is 5% with additional 5% bonus points as outlined above. Points are subtracted from this maximum grade: for example, saying that 2% is lost if some requirement is not completed means that the resulting grade will be 5%-2% => 3%; if the core homework functionality does not work, no bonus points will be given;
- no IntelliJ project files, Gradle and/SBT build scripts: up to 3% lost;
- no tests: up to 4% lost;
- no movie that documents the deployment of your program to EMR: up to 4% lost;
- missing a subset of the Java grammar in your instrumentation: up to 3% lost;
- the code does not compile or it crashes without completing the core functionality: up to 5% lost;
- the documentation is missing or insufficient to understand how to compile and run your program: up to 4% lost;
- only a subset of your submission works: up to 3% lost;
- the minimum grade for this homework cannot be less than zero.

That's it, folks!